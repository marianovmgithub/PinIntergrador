pipeline {
    agent any
    stages {
        stage('Setup AWS CLI & eksctl') { // Preparar herramientas para gestionar el clúster de telemetría
            steps {
                // Instalación de AWS CLI y eksctl para gestionar clústeres EKS
                sh '''
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                sudo ./aws/install

                curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
                sudo mv /tmp/eksctl /usr/local/bin
                '''
            }
        }
        stage('Crear Clúster EKS - Telemetría') { // Crear el clúster de telemetría en AWS
            steps {
                // Comando para crear el clúster EKS de telemetría
                sh '''
                eksctl create cluster \
                --name eks-telemetria \  # Nombre del clúster de telemetría
                --region us-east-1 \     # Región en free tier de AWS
                --node-type t3.micro \   # Tipo de nodo compatible con el free tier
                --nodes 2 \              # Número de nodos
                --managed \              # Clúster gestionado por AWS
                --ssh-access \           # Acceso SSH a los nodos
                --ssh-public-key pin     # Clave SSH, asegúrate de cargarla en AWS
                '''
            }
        }
        stage('Configurar Volumen Persistente para Prometheus') { // Crear PV y PVC para almacenamiento de datos de Prometheus
            steps {
                // Se aplican los manifiestos YAML para crear PV y PVC en Kubernetes
                sh '''
                cat <<EOF | kubectl apply -f -
                apiVersion: v1
                kind: PersistentVolume
                metadata:
                  name: prometheus-pv
                spec:
                  capacity:
                    storage: 10Gi  # Espacio de almacenamiento
                  accessModes:
                    - ReadWriteOnce
                  persistentVolumeReclaimPolicy: Retain
                  hostPath:
                    path: /data/prometheus  # Modificar si es necesario en tu entorno
                ---
                apiVersion: v1
                kind: PersistentVolumeClaim
                metadata:
                  name: prometheus-pvc
                spec:
                  accessModes:
                    - ReadWriteOnce
                  resources:
                    requests:
                      storage: 10Gi  # Espacio solicitado
                EOF
                '''
            }
        }
        stage('Instalar Prometheus y Grafana') { // Instalar herramientas de monitoreo
            steps {
                // Instalación de Prometheus y Grafana mediante Helm
                sh '''
                helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
                helm repo update
                kubectl create namespace prometheus
                helm install prometheus prometheus-community/prometheus --namespace prometheus --set server.persistentVolume.existingClaim=prometheus-pvc --set server.persistentVolume.enabled=true
                kubectl create namespace grafana
                helm install grafana grafana/grafana --namespace grafana --set adminPassword='EKS!sAWSome' --set service.type=LoadBalancer
                '''
            }
        }
        stage('Desplegar Telegraf') { // Desplegar Telegraf para recolectar métricas de CPU, memoria y disco
            steps {
                // Despliegue de Telegraf como un DaemonSet en Kubernetes
                sh '''
                kubectl create namespace monitoring
                cat <<EOF | kubectl apply -f -
                apiVersion: apps/v1
                kind: DaemonSet
                metadata:
                  name: telegraf
                  namespace: monitoring
                spec:
                  selector:
                    matchLabels:
                      app: telegraf
                  template:
                    metadata:
                      labels:
                        app: telegraf
                    spec:
                      containers:
                      - name: telegraf
                        image: telegraf:latest
                        volumeMounts:
                        - name: telegraf-config
                          mountPath: /etc/telegraf/telegraf.conf
                          subPath: telegraf.conf
                      volumes:
                      - name: telegraf-config
                        configMap:
                          name: telegraf-config
                EOF
                '''
            }
        }
    }
    post {
        success {
            echo 'Infraestructura de telemetría desplegada exitosamente, con Telegraf integrado.'
        }
        failure {
            echo 'Error en la creación de la infraestructura de telemetría. Revisa los logs.'
        }
    }
}
