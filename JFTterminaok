pipeline {
    agent any
    
    environment {
        // Definir las variables necesarias
        GRAFANA_URL = 'http://grafana:3000'
        GRAFANA_USER = 'admin'
        GRAFANA_PASS = 'admin'
        PROMETHEUS_URL = 'http://prometheus:9090'
        TELEGRAF_URL = 'http://telegraf:8092'
        TELEGRAF_CONF_DIR = '/home/nuevavirtual/telegraf'
    }
    
    stages {
        stage('Crear Red Docker') {
            steps {
                script {
                    // Crear la red de Docker
                    sh 'docker network create monitoring_network'
                }
            }
        }
        
        stage('Iniciar Contenedores de Telemetría') {
            steps {
                script {
                    // Iniciar Prometheus en la red
                    sh 'docker run -d --name prometheus --network monitoring_network -p 9090:9090 prom/prometheus'
                    
                    // Iniciar Telegraf en la red
                    sh "docker run -d --name telegraf --network monitoring_network -p 8092:8092 -v ${TELEGRAF_CONF_DIR}:/etc/telegraf telegraf"
                    
                    // Iniciar Grafana en la red
                    sh 'docker run -d --name grafana --network monitoring_network -p 3000:3000 grafana/grafana'
                    
                    // Esperar a que los contenedores estén listos
                    sleep(time: 30, unit: 'SECONDS')
                }
            }
        }

        stage('Configurar Prometheus como DataSource en Grafana') {
            steps {
                script {
                    // Configurar Prometheus como fuente de datos en Grafana
                    sh '''docker exec grafana bash -c "curl -X POST -H 'Content-Type: application/json' -u admin:admin \
                        -d '{
                            \\"name\\": \\"Prometheus\\",
                            \\"type\\": \\"prometheus\\",
                            \\"url\\": \\"http://prometheus:9090\\",
                            \\"access\\": \\"proxy\\",
                            \\"isDefault\\": true
                        }' http://localhost:3000/api/datasources"'''
                }
            }
        }
        
        stage('Cargar Dashboard NGINX en Grafana') {
            steps {
                script {
                    // Cargar Dashboard de Grafana para NGINX (ID: 11347)
                    sh '''docker exec grafana bash -c "curl -X POST -H 'Content-Type: application/json' -u admin:admin \
                        -d '{
                            \\"dashboard\\": \\"{ \\"id\\": 11347 }\\" , \\"overwrite\\": true }' \
                        http://localhost:3000/api/dashboards/db"'''
                }
            }
        }
        
        stage('Verificar que los Dashboards estén Cargados') {
            steps {
                script {
                    // Verificar que los dashboards estén correctamente cargados
                    def response = sh(script: "docker exec grafana curl -s -o /dev/null -w %{http_code} -u admin:admin http://localhost:3000/api/dashboards/home", returnStdout: true).trim()
                    if (response != '200') {
                        error "Error al cargar los dashboards. Código de respuesta: ${response}"
                    } else {
                        echo "Dashboards cargados correctamente."
                    }
                }
            }
        }
    }
}
